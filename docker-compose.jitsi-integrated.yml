# This configuration integrates the pipeline directly with Jitsi's multitrack recorder
# The finalize script is called automatically when recording completes

services:
  # Prosody XMPP Server (required for speaker identification)
#  prosody:
#    image: jitsi/prosody:latest
#    container_name: jitsi-docker-prosody-1
#    environment:
#      - ENABLE_GUESTS=1
#      - ENABLE_EVENT_SYNC=1
#      - EVENT_SYNC_URL=http://pipeline:9090/events
#    volumes:
#      - ./prosody/config:/config
#      - ./prosody/plugins:/prosody-plugins-custom
#      - ./logs:/logs
#    networks:
#      - ${DOCKER_NETWORK:-frontend-official-production}
#
#  # Multitrack Recorder with integrated pipeline
#  multitrack-recorder:
#    image: jitsi/multitrack-recorder:latest
#    container_name: jitsi-docker_multitrack_recorder
#    environment:
#      - XMPP_RECORDER_USER=recorder
#      - XMPP_RECORDER_PASSWORD=recorderpass
#      - XMPP_RECORDER_DOMAIN=recorder.meet.jitsi
#      - XMPP_SERVER=prosody
#      - RECORDING_DIR=/recordings
#      # Direct pipeline integration
#      - FINALIZE_SCRIPT_PATH=/pipeline/finalize_wrapper.sh
#      - FINALIZE_SCRIPT_ENABLED=true
#      # Pipeline environment variables
#      - PROJECT=${PROJECT:-official}
#      - ENVIRONMENT=${ENVIRONMENT:-staging}
#      - PARAKEET_CONTAINER=${PARAKEET_CONTAINER:-${PROJECT:+${PROJECT}-}${ENVIRONMENT:-staging}-parakeet-asr-parakeet-asr}
#      - OLLAMA_CONTAINER=${OLLAMA_CONTAINER:-${PROJECT:+${PROJECT}-}${ENVIRONMENT:-staging}-ollama-llm}
#      - TELESALUD_CONTAINER=${TELESALUD_CONTAINER:-${PROJECT:+${PROJECT}-}${ENVIRONMENT:-staging}-telehealth-web-1}
#      - PARAKEET_WS_URL=ws://${PARAKEET_CONTAINER:-${PROJECT:+${PROJECT}-}${ENVIRONMENT:-staging}-parakeet-asr-parakeet-asr}:8000/ws/transcribe
#      - OLLAMA_API_URL=http://${OLLAMA_CONTAINER:-${PROJECT:+${PROJECT}-}${ENVIRONMENT:-staging}-ollama-llm}:11434/api/generate
#      - OLLAMA_MODEL=gpt-oss:20b
#      - TELESALUD_API_BASE_URL=http://${TELESALUD_CONTAINER:-${PROJECT:+${PROJECT}-}${ENVIRONMENT:-staging}-telehealth-web-1}
#      - TELESALUD_API_TOKEN=${TELESALUD_API_TOKEN}
#      - METADATA_DIR=/shared/consultations
#    volumes:
#      - ./recordings:/recordings
#      - ./logs:/logs
#      - ./shared:/shared
#      - ./pipeline:/pipeline:ro  # Mount pipeline scripts as read-only
#    networks:
#      - ${DOCKER_NETWORK:-frontend-official-production}
#    depends_on:
#      - prosody
#    restart: unless-stopped

  # Optional: Pipeline service for webhook mode or manual processing
  # Can coexist with the integrated recorder for flexibility
  pipeline:
    build: ./pipeline
    container_name: ${PROJECT:+${PROJECT}-}${ENVIRONMENT:-staging}-transcription-pipeline
    ports:
      - "9090:9090"  # Webhook handler port
    environment:
      # Integration mode selection
      - INTEGRATION_MODE=${INTEGRATION_MODE:-dual}  # Options: jitsi, webhook, dual
      - PROJECT=${PROJECT:-official}
      - ENVIRONMENT=${ENVIRONMENT:-staging}
      - DOMAIN_BASE=${DOMAIN_BASE:-localhost}
      - PARAKEET_CONTAINER=${PARAKEET_CONTAINER:-${PROJECT:+${PROJECT}-}${ENVIRONMENT:-staging}-parakeet-asr-parakeet-asr}
      - OLLAMA_CONTAINER=${OLLAMA_CONTAINER:-${PROJECT:+${PROJECT}-}${ENVIRONMENT:-staging}-ollama-llm}
      - TELESALUD_CONTAINER=${TELESALUD_CONTAINER:-${PROJECT:+${PROJECT}-}${ENVIRONMENT:-staging}-telehealth-web-1}
      - OPENEMR_CONTAINER=${OPENEMR_CONTAINER:-${PROJECT:+${PROJECT}-}${ENVIRONMENT:-staging}-openemr-1}
      - PROSODY_CONTAINER=${PROSODY_CONTAINER:-jitsi-docker-prosody-1}
      - PARAKEET_WS_URL=ws://${PARAKEET_CONTAINER:-${PROJECT:+${PROJECT}-}${ENVIRONMENT:-staging}-parakeet-asr-parakeet-asr}:8000/ws/transcribe
      - OLLAMA_API_URL=http://${OLLAMA_CONTAINER:-${PROJECT:+${PROJECT}-}${ENVIRONMENT:-staging}-ollama-llm}:11434/api/generate
      - OLLAMA_MODEL=gpt-oss:20b
      - PROSODY_API_URL=http://${PROSODY_CONTAINER:-jitsi-docker-prosody-1}:5280/event_sync
      - TELESALUD_API_BASE_URL=http://${TELESALUD_CONTAINER:-${PROJECT:+${PROJECT}-}${ENVIRONMENT:-staging}-telehealth-web-1}
      - TELESALUD_API_TOKEN=${TELESALUD_API_TOKEN}
      - TELESALUD_API_URL=http://${TELESALUD_CONTAINER:-${PROJECT:+${PROJECT}-}${ENVIRONMENT:-staging}-telehealth-web-1}/videoconsultation/evolution
      - TELESALUD_WEBHOOK_URL=http://${TELESALUD_CONTAINER:-${PROJECT:+${PROJECT}-}${ENVIRONMENT:-staging}-telehealth-web-1}/api/webhook/evolution
      - USE_WEBHOOK=${USE_WEBHOOK:-true}
      - OPENEMR_API_URL=http://${OPENEMR_CONTAINER:-${PROJECT:+${PROJECT}-}${ENVIRONMENT:-staging}-openemr-1}:80/apis/default/api
      - OPENEMR_API_KEY=${OPENEMR_API_KEY:-}
      - WEBHOOK_PORT=9090
      - WEBHOOK_HOST=0.0.0.0
      - WEBHOOK_TOKEN=${WEBHOOK_TOKEN:-}
      - METADATA_DIR=/shared/consultations
      - SHARED_NOTES_DIR=/shared/notes
    volumes:
      - ./recordings:/recordings
      - ./logs:/logs
      - ./shared:/shared
    networks:
      - ${DOCKER_NETWORK:-frontend-official-production}
    entrypoint: ["/bin/sh"]
    command: >
      -c "
        echo '[üîß] Pipeline running in ${INTEGRATION_MODE:-dual} mode';
        if [ '${INTEGRATION_MODE:-dual}' = 'webhook' ] || [ '${INTEGRATION_MODE:-dual}' = 'dual' ]; then
          echo '[üåê] Starting webhook handler...';
          python3 /pipeline/webhook_handler.py &
        fi;
        echo '[‚úÖ] Pipeline service ready';
        sleep infinity
      "

networks:
  frontend-official-production:
    external: true